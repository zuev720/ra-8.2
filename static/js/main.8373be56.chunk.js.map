{"version":3,"sources":["RequestInfoBlock/RequestInfoBlock.jsx","Hooks/useJsonFetch.jsx","App.js","reportWebVitals.js","index.js"],"names":["RequestInfoBlock","props","useState","state","setState","InfoBlock","url","opt","loading","data","error","status","setStatus","useEffect","fetch","then","result","json","useJsonFetch","URL","method","success","className","type","onClick","title","App","successURL","process","errorURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAGO,SAASA,EAAiBC,GAC7B,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMMC,EAAY,WACd,MCTD,SAAsBC,EAAKC,GAC9B,MAA4BL,mBAAS,CACjCM,SAAS,EACTC,KAAM,KACNC,MAAO,OAHX,mBAAOC,EAAP,KAAeC,EAAf,KAkBA,OAZAC,qBAAU,WACND,EAAU,CAAEJ,SAAS,IACrBM,MAAMR,EAAKC,GACNQ,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GACgB,OAAlBA,EAAOL,OACFC,EAAU,CAACJ,SAAS,EAAOC,KAAMO,EAAOL,SACxCC,EAAU,CAACJ,SAAS,EAAME,MAAOM,EAAOL,cAGvD,IAEI,CAACA,EAAOH,QAASG,EAAOF,KAAME,EAAOD,ODVNQ,CAAajB,EAAMkB,IAAK,CAACC,OAAQ,QAAnE,mBAAOZ,EAAP,KAAgBa,EAAhB,KAAyBX,EAAzB,KAEA,OAAQ,sBAAKY,UAAW,YAAhB,UACKd,GAAW,2CACXa,GAAW,4BAAIA,IACfX,GAAS,4BAAIA,QAI9B,OACI,sBAAKY,UAAW,mBAAhB,UACKnB,EACD,wBAAQoB,KAAM,SAAUD,UAAWrB,EAAMqB,UAAWE,QAjBlC,WACtBpB,EAAS,cAACC,EAAD,MAgBL,SAAiFJ,EAAMwB,WEPpFC,MAZf,WACI,IAAMC,EAAU,UAAMC,sCAAN,QACVC,EAAQ,UAAMD,sCAAN,SAEd,OACI,sBAAKN,UAAU,MAAf,UACI,cAACtB,EAAD,CAAkBsB,UAAW,gBAAiBH,IAAKQ,EAAYF,MAAO,mBACtE,cAACzB,EAAD,CAAkBsB,UAAW,cAAeH,IAAKU,EAAUJ,MAAO,qBCC/DK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.8373be56.chunk.js","sourcesContent":["import {useJsonFetch} from '../Hooks/useJsonFetch';\nimport {useState} from 'react';\n\nexport function RequestInfoBlock(props) {\n    const [state, setState] = useState(null);\n\n    const handleButtonClick = () => {\n        setState(<InfoBlock />);\n    }\n\n    const InfoBlock = () => {\n        const [loading, success, error] = useJsonFetch(props.URL, {method: 'GET'});\n\n        return  <div className={'infoBlock'}>\n                    {loading && <p>...Loading</p>}\n                    {success && <p>{success}</p>}\n                    {error && <p>{error}</p>}\n                </div>\n    }\n\n    return (\n        <div className={'RequestInfoBlock'}>\n            {state}\n            <button type={'button'} className={props.className} onClick={handleButtonClick}>{props.title}</button>\n        </div>\n    )\n}\n","import {useEffect, useState} from 'react';\n\nexport function useJsonFetch(url, opt) {\n    const [status, setStatus] = useState({\n        loading: false,\n        data: null,\n        error: null\n    })\n\n    useEffect(() => {\n        setStatus({ loading: true })\n        fetch(url, opt)\n            .then((result) => result.json())\n            .then((result) => {\n                (result.status === 'ok')\n                    ? setStatus({loading: false, data: result.status})\n                    : setStatus({loading: false,error: result.status});\n            })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return [status.loading, status.data, status.error];\n}\n","import './App.css';\n\nimport {RequestInfoBlock} from './RequestInfoBlock/RequestInfoBlock';\n\nfunction App() {\n    const successURL = `${process.env.REACT_APP_CURRENCY_URL}data`;\n    const errorURL = `${process.env.REACT_APP_CURRENCY_URL}error`;\n\n    return (\n        <div className=\"App\">\n            <RequestInfoBlock className={'buttonSuccess'} URL={successURL} title={'SuccessRequest'}/>\n            <RequestInfoBlock className={'buttonError'} URL={errorURL} title={'ErrorRequest'}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}